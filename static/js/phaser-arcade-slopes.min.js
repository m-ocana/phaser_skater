Phaser.Plugin.ArcadeSlopes = function(e, t, o) {
    Phaser.Plugin.call(this, e, t), this.defaultType = o || Phaser.Plugin.ArcadeSlopes.SAT, this.factory = new Phaser.Plugin.ArcadeSlopes.TileSlopeFactory, this.solvers = {}, this.solvers[Phaser.Plugin.ArcadeSlopes.SAT] = new Phaser.Plugin.ArcadeSlopes.SatSolver
}, Phaser.Plugin.ArcadeSlopes.prototype = Object.create(Phaser.Plugin.prototype), Phaser.Plugin.ArcadeSlopes.prototype.constructor = Phaser.Plugin.ArcadeSlopes, Phaser.Plugin.ArcadeSlopes.VERSION = "0.1.0-alpha", Phaser.Plugin.ArcadeSlopes.SAT = "sat", Phaser.Plugin.ArcadeSlopes.METROID = "metroid", Phaser.Plugin.ArcadeSlopes.prototype.init = function() {
    this.game.slopes = this.game.slopes || this, this.originalCollideSpriteVsTilemapLayer = Phaser.Physics.Arcade.prototype.collideSpriteVsTilemapLayer, Phaser.Physics.Arcade.prototype.collideSpriteVsTilemapLayer = Phaser.Plugin.ArcadeSlopes.Overrides.collideSpriteVsTilemapLayer, Phaser.Tilemap.prototype.getTileTopLeft = Phaser.Plugin.ArcadeSlopes.Overrides.getTileTopLeft, Phaser.Tilemap.prototype.getTileTopRight = Phaser.Plugin.ArcadeSlopes.Overrides.getTileTopRight, Phaser.Tilemap.prototype.getTileBottomLeft = Phaser.Plugin.ArcadeSlopes.Overrides.getTileBottomLeft, Phaser.Tilemap.prototype.getTileBottomRight = Phaser.Plugin.ArcadeSlopes.Overrides.getTileBottomRight
}, Phaser.Plugin.ArcadeSlopes.prototype.destroy = function() {
    this.game.slopes = null, Phaser.Physics.Arcade.prototype.collideSpriteVsTilemapLayer = this.originalCollideSpriteVsTilemapLayer, Phaser.Tilemap.prototype.getTileTopLeft = null, Phaser.Tilemap.prototype.getTileTopRight = null, Phaser.Tilemap.prototype.getTileBottomLeft = null, Phaser.Tilemap.prototype.getTileBottomRight = null, Phaser.Plugin.prototype.destroy.call(this)
}, Phaser.Plugin.ArcadeSlopes.prototype.enable = function(e) {
    if (Array.isArray(e)) for (var t = 0; t < e.length; t++) this.enable(e[t]);
    else e instanceof Phaser.Group ? this.enable(e.children) : (e.hasOwnProperty("body") && this.enableBody(e.body), e.hasOwnProperty("children") && e.children.length > 0 && this.enable(e.children))
}, Phaser.Plugin.ArcadeSlopes.prototype.enableBody = function(e) {
    e.polygon = new SAT.Box(new SAT.Vector(e.x, e.y), e.width, e.height).toPolygon()
}, Phaser.Plugin.ArcadeSlopes.prototype.convertTilemap = function(e, t, o) {
    return this.factory.convertTilemap(e, t, o)
}, Phaser.Plugin.ArcadeSlopes.prototype.convertTilemapLayer = function(e, t) {
    return this.factory.convertTilemapLayer(e, t)
}, Phaser.Plugin.ArcadeSlopes.prototype.collide = function(e, t, o, r) {
    return o.slope.solver && this.solvers.hasOwnProperty(o.slope.solver) ? this.solvers[o.slope.solver].collide(e, t, o, r) : this.solvers[this.defaultType].collide(e, t, o, r)
}, Phaser.Plugin.ArcadeSlopes.Facade = function(e) {
    this.factory = e
}, Phaser.Plugin.ArcadeSlopes.Overrides = {}, Phaser.Plugin.ArcadeSlopes.Overrides.collideSpriteVsTilemapLayer = function(e, t, o, r, i, l) {
    if (e.body) {
        var s = t.getTiles(e.body.position.x - e.body.tilePadding.x, e.body.position.y - e.body.tilePadding.y, e.body.width + e.body.tilePadding.x, e.body.height + e.body.tilePadding.y, !1, !1);
        if (0 !== s.length) for (var n = 0; n < s.length; n++) r ? r.call(i, e, s[n]) && (s[n].hasOwnProperty("slope") ? this.game.slopes.collide(n, e.body, s[n], l) && this._total++ : this.separateTile(n, e.body, s[n], l) && (this._total++, o && o.call(i, e, s[n]))) : s[n].hasOwnProperty("slope") ? this.game.slopes.collide(n, e.body, s[n], l) && this._total++ : this.separateTile(n, e.body, s[n], l) && (this._total++, o && o.call(i, e, s[n]))
    }
}, Phaser.Plugin.ArcadeSlopes.Overrides.getTileTopLeft = function(e, t, o) {
    return t > 0 && o > 0 ? this.layers[e].data[o - 1][t - 1] : null
}, Phaser.Plugin.ArcadeSlopes.Overrides.getTileTopRight = function(e, t, o) {
    return t < this.layers[e].width - 1 && o > 0 ? this.layers[e].data[o - 1][t + 1] : null
}, Phaser.Plugin.ArcadeSlopes.Overrides.getTileBottomLeft = function(e, t, o) {
    return t > 0 && o < this.layers[e].height - 1 ? this.layers[e].data[o + 1][t - 1] : null
}, Phaser.Plugin.ArcadeSlopes.Overrides.getTileBottomRight = function(e, t, o) {
    return t < this.layers[e].width - 1 && o < this.layers[e].height - 1 ? this.layers[e].data[o + 1][t + 1] : null
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer = function() {
    this.restraints = {}, this.setDefaultRestraints()
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer.prototype.restrain = function(e, t, o, r) {
    if (!r.overlap || !o.neighbours || !this.restraints.hasOwnProperty(o.slope.type)) return !0;
    for (var i in this.restraints[o.slope.type]) {
        var l = this.restraints[o.slope.type][i],
            s = o.neighbours[l.neighbour];
        if (s && s.slope) {
            var n = !1;
            if (n = l.types ? l.types.indexOf(s.slope.type) > -1 : s.slope.type === o.slope.type, l.hasOwnProperty("overlapX") && (n = "number" == typeof l.overlapX ? n && r.overlapN.x === l.overlapX : n && r.overlapN.x >= l.overlapX[0] && r.overlapN.x <= l.overlapX[1]), l.hasOwnProperty("overlapY") && (n = "number" == typeof l.overlapY ? n && r.overlapN.y === l.overlapY : n && r.overlapN.y >= l.overlapY[0] && r.overlapN.y <= l.overlapY[1]), n) {
                var a = l.separate;
                return "function" == typeof a && (a = a.call(this, t, o, r)), a && o.slope.axis && e.collideOnAxis(t, o, o.slope.axis), !1
            }
        }
    }
    return !0
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer.resolveOverlaps = function(e) {
    switch (e) {
        case "up":
            return {
                overlapX: 0,
                overlapY: [-1, 0]
            };
        case "down":
            return {
                overlapX: 0,
                overlapY: [0, 1]
            };
        case "left":
            return {
                overlapX: [-1, 0],
                overlapY: 0
            };
        case "right":
            return {
                overlapX: [0, 1],
                overlapY: 0
            }
    }
    return console.warn("Unknown overlap direction '" + e + "'"), {}
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer.prepareRestraints = function(e) {
    var t = {};
    for (var o in e) {
        var r = e[o];
        for (var i in r) {
            var l = r[i];
            if (l.direction) {
                var s = Phaser.Plugin.ArcadeSlopes.SatRestrainer.resolveOverlaps(l.direction);
                l.overlapX = s.overlapX, l.overlapY = s.overlapY
            }
            for (var n in l.types) l.types[n] = Phaser.Plugin.ArcadeSlopes.TileSlope.resolveType(l.types[n]);
            l.separate !== !1 && "function" != typeof l.separate && (l.separate = !0)
        }
        var a = Phaser.Plugin.ArcadeSlopes.TileSlope.resolveType(o);
        t[a] = r
    }
    return t
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer.prototype.setDefaultRestraints = function() {
    var e = {};
    e.HALF_TOP = [{
        direction: "left",
        neighbour: "left",
        types: this.resolve("topRight", "right"),
        separate: !1
    }, {
        direction: "right",
        neighbour: "right",
        types: this.resolve("topLeft", "left"),
        separate: !1
    }], e.HALF_BOTTOM = [{
        direction: "left",
        neighbour: "left",
        types: this.resolve("right", "bottomRight"),
        separate: !1
    }, {
        direction: "right",
        neighbour: "right",
        types: this.resolve("left", "bottomLeft"),
        separate: !1
    }], e.HALF_LEFT = [{
        direction: "up",
        neighbour: "above",
        types: this.resolve("bottomLeft", "bottom"),
        separate: !1
    }, {
        direction: "down",
        neighbour: "below",
        types: this.resolve("topLeft", "top"),
        separate: !1
    }], e.HALF_RIGHT = [{
        direction: "up",
        neighbour: "above",
        types: this.resolve("bottom", "bottomRight"),
        separate: !1
    }, {
        direction: "down",
        neighbour: "below",
        types: this.resolve("top", "topRight"),
        separate: !1
    }], e.HALF_BOTTOM_LEFT = [{
        direction: "right",
        neighbour: "bottomRight",
        types: this.resolve("topLeft")
    }, {
        direction: "up",
        neighbour: "topLeft",
        types: this.resolve("bottomRight")
    }], e.HALF_BOTTOM_RIGHT = [{
        direction: "left",
        neighbour: "bottomLeft",
        types: this.resolve("topRight")
    }, {
        direction: "up",
        neighbour: "topRight",
        types: this.resolve("bottomLeft")
    }], e.HALF_TOP_LEFT = [{
        direction: "right",
        neighbour: "topRight",
        types: this.resolve("bottomLeft")
    }, {
        direction: "down",
        neighbour: "bottomLeft",
        types: this.resolve("topRight")
    }], e.HALF_TOP_RIGHT = [{
        direction: "left",
        neighbour: "topLeft",
        types: this.resolve("bottomRight")
    }, {
        direction: "down",
        neighbour: "bottomRight",
        types: this.resolve("topLeft")
    }], e.QUARTER_BOTTOM_LEFT_LOW = [{
        direction: "right",
        neighbour: "bottomRight",
        types: this.resolve("topLeft")
    }, {
        direction: "up",
        neighbour: "left",
        types: this.resolve("topLeft", "right", "bottomRight")
    }, {
        direction: "left",
        neighbour: "left",
        types: this.resolve("right", "bottomRight"),
        separate: !1
    }], e.QUARTER_BOTTOM_LEFT_HIGH = [{
        direction: "right",
        neighbour: "right",
        types: this.resolve("left", "bottomLeft"),
        separate: function(e, t) {
            return e.bottom < t.bottom
        }
    }, {
        direction: "up",
        neighbour: "topLeft",
        types: this.resolve("bottomRight")
    }], e.QUARTER_BOTTOM_RIGHT_LOW = [{
        direction: "left",
        neighbour: "bottomLeft",
        types: this.resolve("topRight")
    }, {
        direction: "up",
        neighbour: "right",
        types: this.resolve("topRight", "left", "bottomLeft")
    }, {
        direction: "right",
        neighbour: "right",
        types: this.resolve("left", "bottomLeft"),
        separate: !1
    }], e.QUARTER_BOTTOM_RIGHT_HIGH = [{
        direction: "left",
        neighbour: "left",
        types: this.resolve("right", "bottomRight"),
        separate: function(e, t) {
            return e.bottom < t.bottom
        }
    }, {
        direction: "up",
        neighbour: "topRight",
        types: this.resolve("bottomLeft")
    }], e.QUARTER_LEFT_BOTTOM_LOW = [{
        direction: "up",
        neighbour: "above",
        types: this.resolve("topLeft", "left"),
        separate: function(e, t) {
            return e.left > t.left
        }
    }, {
        direction: "right",
        neighbour: "bottomRight",
        types: this.resolve("topLeft")
    }], e.QUARTER_LEFT_BOTTOM_HIGH = [{
        direction: "up",
        neighbour: "topLeft",
        types: this.resolve("bottomRight")
    }, {
        direction: "down",
        neighbour: "below",
        types: this.resolve("topLeft", "top"),
        separate: !1
    }, {
        direction: "right",
        neighbour: "below",
        types: this.resolve("topLeft", "top", "bottomRight")
    }], e.QUARTER_RIGHT_BOTTOM_LOW = [{
        direction: "up",
        neighbour: "above",
        types: this.resolve("bottom", "bottomRight"),
        separate: function(e, t) {
            return e.right < t.right
        }
    }, {
        direction: "left",
        neighbour: "bottomLeft",
        types: this.resolve("topRight")
    }], e.QUARTER_RIGHT_BOTTOM_HIGH = [{
        direction: "up",
        neighbour: "topRight",
        types: this.resolve("bottomLeft")
    }, {
        direction: "down",
        neighbour: "below",
        types: this.resolve("top", "topRight"),
        separate: !1
    }, {
        direction: "left",
        neighbour: "below",
        types: this.resolve("top", "topRight", "bottomLeft")
    }], e.QUARTER_LEFT_TOP_LOW = [{
        direction: "up",
        neighbour: "above",
        types: this.resolve("bottomLeft", "bottom")
    }, {
        direction: "right",
        neighbour: "above",
        types: this.resolve("bottomLeft", "bottom"),
        separate: !1
    }, {
        direction: "down",
        neighbour: "bottomLeft",
        types: this.resolve("topRight")
    }], e.QUARTER_LEFT_TOP_HIGH = [{
        direction: "right",
        neighbour: "topRight",
        types: this.resolve("bottomLeft")
    }, {
        direction: "down",
        neighbour: "below",
        types: this.resolve("topLeft", "top"),
        separate: function(e, t) {
            return e.left > t.left
        }
    }], e.QUARTER_RIGHT_TOP_LOW = [{
        direction: "up",
        neighbour: "above",
        types: this.resolve("bottom", "bottomRight")
    }, {
        direction: "left",
        neighbour: "above",
        types: this.resolve("bottom", "bottomRight"),
        separate: !1
    }, {
        direction: "down",
        neighbour: "bottomRight",
        types: this.resolve("topLeft")
    }], e.QUARTER_RIGHT_TOP_HIGH = [{
        direction: "left",
        neighbour: "topLeft",
        types: this.resolve("bottomRight")
    }, {
        direction: "left",
        neighbour: "below",
        types: this.resolve("top", "topRight")
    }, {
        direction: "down",
        neighbour: "below",
        types: this.resolve("top", "topRight"),
        separate: function(e, t) {
            return e.right < t.right
        }
    }], e.QUARTER_TOP_LEFT_LOW = [{
        direction: "right",
        neighbour: "topRight",
        types: this.resolve("bottomLeft")
    }, {
        direction: "left",
        neighbour: "left",
        types: this.resolve("topRight", "right"),
        separate: !1
    }, {
        direction: "down",
        neighbour: "left",
        types: this.resolve("bottomLeft", "topRight", "right")
    }], e.QUARTER_TOP_LEFT_HIGH = [{
        direction: "right",
        neighbour: "right",
        types: this.resolve("topLeft", "left"),
        separate: function(e, t) {
            return e.top > t.top
        }
    }, {
        direction: "down",
        neighbour: "bottomLeft",
        types: this.resolve("topRight")
    }], e.QUARTER_TOP_RIGHT_LOW = [{
        direction: "left",
        neighbour: "topLeft",
        types: this.resolve("bottomRight")
    }, {
        direction: "right",
        neighbour: "right",
        types: this.resolve("topLeft", "left"),
        separate: !1
    }, {
        direction: "down",
        neighbour: "right",
        types: this.resolve("bottomRight", "topLeft", "left")
    }], e.QUARTER_TOP_RIGHT_HIGH = [{
        direction: "left",
        neighbour: "left",
        types: this.resolve("topRight", "right"),
        separate: function(e, t) {
            return e.top > t.top
        }
    }, {
        direction: "down",
        neighbour: "bottomRight",
        types: this.resolve("topLeft")
    }], this.informalRestraints = JSON.parse(JSON.stringify(e)), this.restraints = Phaser.Plugin.ArcadeSlopes.SatRestrainer.prepareRestraints(e)
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer.intersectArrays = function(e, t) {
    return e.filter(function(e) {
        return -1 !== t.indexOf(e)
    }).filter(function(e, t, o) {
        return o.indexOf(e) === t
    })
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer.prototype.resolve = function() {
    var e = [];
    if (!arguments.length) return e;
    for (var t in arguments) {
        var o = arguments[t];
        if (Phaser.Plugin.ArcadeSlopes.SatRestrainer.hasOwnProperty(o + "Vertices")) {
            var r = Array.prototype.slice.call(Phaser.Plugin.ArcadeSlopes.SatRestrainer[o + "Vertices"]);
            if (1 === arguments.length) return r;
            e = e.length ? Phaser.Plugin.ArcadeSlopes.SatRestrainer.intersectArrays(e, r) : r
        } else console.warn("Tried to resolve types from undefined vertex map location '" + o + "'")
    }
    return e
}, Phaser.Plugin.ArcadeSlopes.SatRestrainer.topVertices = ["HALF_LEFT", "HALF_RIGHT", "QUARTER_LEFT_TOP_LOW", "QUARTER_RIGHT_TOP_LOW", "QUARTER_LEFT_BOTTOM_LOW", "QUARTER_RIGHT_BOTTOM_LOW"], Phaser.Plugin.ArcadeSlopes.SatRestrainer.bottomVertices = ["HALF_LEFT", "HALF_RIGHT", "QUARTER_LEFT_TOP_HIGH", "QUARTER_LEFT_BOTTOM_HIGH", "QUARTER_RIGHT_TOP_HIGH", "QUARTER_RIGHT_BOTTOM_HIGH"], Phaser.Plugin.ArcadeSlopes.SatRestrainer.leftVertices = ["HALF_TOP", "HALF_BOTTOM", "QUARTER_TOP_LEFT_LOW", "QUARTER_TOP_RIGHT_HIGH", "QUARTER_BOTTOM_LEFT_LOW", "QUARTER_BOTTOM_RIGHT_HIGH"], Phaser.Plugin.ArcadeSlopes.SatRestrainer.rightVertices = ["HALF_TOP", "HALF_BOTTOM", "QUARTER_TOP_LEFT_HIGH", "QUARTER_TOP_RIGHT_LOW", "QUARTER_BOTTOM_LEFT_HIGH", "QUARTER_BOTTOM_RIGHT_LOW"], Phaser.Plugin.ArcadeSlopes.SatRestrainer.topLeftVertices = ["FULL", "HALF_TOP", "HALF_LEFT", "HALF_TOP_LEFT", "HALF_TOP_RIGHT", "HALF_BOTTOM_LEFT", "QUARTER_TOP_LEFT_LOW", "QUARTER_TOP_LEFT_HIGH", "QUARTER_TOP_RIGHT_HIGH", "QUARTER_BOTTOM_LEFT_HIGH", "QUARTER_LEFT_TOP_LOW", "QUARTER_LEFT_TOP_HIGH", "QUARTER_LEFT_BOTTOM_LOW", "QUARTER_LEFT_BOTTOM_HIGH", "QUARTER_RIGHT_TOP_HIGH"], Phaser.Plugin.ArcadeSlopes.SatRestrainer.topRightVertices = ["FULL", "HALF_TOP", "HALF_RIGHT", "HALF_TOP_LEFT", "HALF_TOP_RIGHT", "HALF_BOTTOM_RIGHT", "QUARTER_TOP_LEFT_LOW", "QUARTER_TOP_LEFT_HIGH", "QUARTER_TOP_RIGHT_LOW", "QUARTER_TOP_RIGHT_HIGH", "QUARTER_BOTTOM_RIGHT_HIGH", "QUARTER_LEFT_TOP_HIGH", "QUARTER_RIGHT_TOP_LOW", "QUARTER_RIGHT_TOP_HIGH", "QUARTER_RIGHT_BOTTOM_LOW", "QUARTER_RIGHT_BOTTOM_HIGH"], Phaser.Plugin.ArcadeSlopes.SatRestrainer.bottomLeftVertices = ["FULL", "HALF_LEFT", "HALF_BOTTOM", "HALF_TOP_LEFT", "HALF_BOTTOM_LEFT", "HALF_BOTTOM_RIGHT", "QUARTER_TOP_LEFT_HIGH", "QUARTER_BOTTOM_LEFT_LOW", "QUARTER_BOTTOM_LEFT_HIGH", "QUARTER_BOTTOM_RIGHT_LOW", "QUARTER_BOTTOM_RIGHT_HIGH", "QUARTER_LEFT_TOP_HIGH", "QUARTER_LEFT_BOTTOM_LOW", "QUARTER_LEFT_BOTTOM_HIGH", "QUARTER_RIGHT_BOTTOM_LOW"], Phaser.Plugin.ArcadeSlopes.SatRestrainer.bottomRightVertices = ["FULL", "HALF_RIGHT", "HALF_BOTTOM", "HALF_TOP_RIGHT", "HALF_BOTTOM_LEFT", "HALF_BOTTOM_RIGHT", "QUARTER_TOP_RIGHT_HIGH", "QUARTER_BOTTOM_LEFT_LOW", "QUARTER_BOTTOM_LEFT_HIGH", "QUARTER_BOTTOM_RIGHT_LOW", "QUARTER_BOTTOM_RIGHT_HIGH", "QUARTER_LEFT_BOTTOM_LOW", "QUARTER_RIGHT_TOP_HIGH", "QUARTER_RIGHT_BOTTOM_LOW", "QUARTER_RIGHT_BOTTOM_HIGH"], Phaser.Plugin.ArcadeSlopes.SatSolver = function(e) {
    this.options = Phaser.Utils.mixin(e || {}, {
        preferY: !1,
        stick: new Phaser.Point(0, 0),
        restrain: !0
    }), this.restrainers = [new Phaser.Plugin.ArcadeSlopes.SatRestrainer]
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prepareResponse = function(e) {
    return e.overlapV.scale(-1), e.overlapN.scale(-1), e
}, Phaser.Plugin.ArcadeSlopes.SatSolver.putOnSlopeX = function(e, t) {
    var o = Phaser.Point.subtract(t.slope.line.end, t.slope.line.start),
        r = (e.y - t.slope.line.start.y) / o.y;
    e.position.x = t.slope.line.start.x + r * o.y
}, Phaser.Plugin.ArcadeSlopes.SatSolver.putOnSlopeY = function(e, t) {
    var o = Phaser.Point.subtract(t.slope.line.end, t.slope.line.start),
        r = (e.x - t.slope.line.start.x) / o.x;
    e.position.y = t.slope.line.start.y + r * o.y
}, Phaser.Plugin.ArcadeSlopes.SatSolver.minimumOffsetX = function(e) {
    return e.y * e.y / e.x + e.x
}, Phaser.Plugin.ArcadeSlopes.SatSolver.minimumOffsetY = function(e) {
    return e.x * e.x / e.y + e.y
}, Phaser.Plugin.ArcadeSlopes.SatSolver.movingAgainstY = function(e, t) {
    return t.overlapV.y < 0 && e.velocity.y > 0 || t.overlapV.y > 0 && e.velocity.y < 0
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.shouldPreferY = function(e, t) {
    return this.options.preferY && 0 !== t.overlapV.y && 0 !== t.overlapV.x && Phaser.Plugin.ArcadeSlopes.SatSolver.movingAgainstY(e, t)
}, Phaser.Plugin.ArcadeSlopes.SatSolver.isSeparatingAxis = function(e, t, o, r) {
    var i = SAT.isSeparatingAxis(e.pos, t.pos, e.points, t.points, o, r || null);
    return r && (r.a = e, r.b = t, r.overlapV = r.overlapN.clone().scale(r.overlap)), i
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.separate = function(e, t, o, r) {
    return (r || this.shouldSeparate(t.index, e, t, o)) && t.collides ? (this.shouldPreferY(e, o) ? e.position.y += Phaser.Plugin.ArcadeSlopes.SatSolver.minimumOffsetY(o.overlapV) : (e.position.x += o.overlapV.x, e.position.y += o.overlapV.y), !0) : !1
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.applyVelocity = function(e, t, o) {
    e.hasOwnProperty("velocityVector") ? (e.velocityVector.x = e.velocity.x, e.velocityVector.y = e.velocity.y) : e.velocityVector = new SAT.Vector(e.velocity.x, e.velocity.y);
    var r = e.velocityVector.clone().projectN(o.overlapN),
        i = e.velocityVector.clone().sub(r);
    r.x = r.x * -e.bounce.x, r.y = r.y * -e.bounce.y, i.x = i.x, i.y = i.y, e.velocity.x = r.x + i.x, e.velocity.y = r.y + i.y
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.updateFlags = function(e, t) {
    e.touching.up = e.touching.up || t.overlapV.y > 0, e.touching.down = e.touching.down || t.overlapV.y < 0, e.touching.left = e.touching.left || t.overlapV.x > 0, e.touching.right = e.touching.right || t.overlapV.x < 0, e.blocked.up = e.blocked.up || 0 === t.overlapV.x && t.overlapV.y > 0, e.blocked.down = e.blocked.down || 0 === t.overlapV.x && t.overlapV.y < 0, e.blocked.left = e.blocked.left || 0 === t.overlapV.y && t.overlapV.x > 0, e.blocked.right = e.blocked.right || 0 === t.overlapV.y && t.overlapV.x < 0
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.collide = function(e, t, o, r) {
    if (!(t.enable && t.polygon && o.slope && o.slope.polygon)) return !1;
    t.polygon.pos.x = t.x, t.polygon.pos.y = t.y, o.slope.polygon.pos.x = o.worldX, o.slope.polygon.pos.y = o.worldY;
    var i = new SAT.Response;
    return SAT.testPolygonPolygon(t.polygon, o.slope.polygon, i) ? r ? !0 : (Phaser.Plugin.ArcadeSlopes.SatSolver.prepareResponse(i), this.separate(t, o, i) ? (this.applyVelocity(t, o, i), this.updateFlags(t, i), !0) : !1) : !1
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.collideOnAxis = function(e, t, o, r) {
    if (!(e.polygon && t.slope && t.slope.polygon)) return !1;
    r = r || new SAT.Response;
    var i = Phaser.Plugin.ArcadeSlopes.SatSolver.isSeparatingAxis(e.polygon, t.slope.polygon, o, r);
    return i ? !1 : (Phaser.Plugin.ArcadeSlopes.SatSolver.prepareResponse(r), this.separate(e, t, r, !0), this.applyVelocity(e, t, r), this.updateFlags(e, r), !0)
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.shouldSeparate = function(e, t, o, r) {
    if (!r.overlap) return !1;
    if (o.slope.edges.top === Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY && r.overlapN.y < 0 && 0 === r.overlapN.x) return !1;
    if (o.slope.edges.bottom === Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY && r.overlapN.y > 0 && 0 === r.overlapN.x) return !1;
    if (o.slope.edges.left === Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY && r.overlapN.x < 0 && 0 === r.overlapN.y) return !1;
    if (o.slope.edges.right === Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY && r.overlapN.x > 0 && 0 === r.overlapN.y) return !1;
    if (!this.options.restrain) return !0;
    for (var i in this.restrainers) {
        var l = this.restrainers[i];
        if ("function" == typeof l.restrain && !l.restrain(this, t, o, r)) return !1
    }
    return !0
}, Phaser.Plugin.ArcadeSlopes.SatSolver.prototype.debug = function(e, t) {}, Phaser.Plugin.ArcadeSlopes.TileSlope = function(e, t, o, r, i, l) {
    this.type = e, this.tile = t, this.polygon = o, this.line = r, this.edges = Phaser.Utils.mixin(i || {}, {
        top: Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID,
        bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID,
        left: Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID,
        right: Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID
    }), this.axis = l || null, this.solver = null, this.friction = new Phaser.Point
}, Phaser.Plugin.ArcadeSlopes.TileSlope.resolveType = function(e, t) {
    return parseInt(e) > -1 ? e : Phaser.Plugin.ArcadeSlopes.TileSlope.hasOwnProperty(e) ? Phaser.Plugin.ArcadeSlopes.TileSlope[e] : (console.warn("Unresolved slope type '" + e + "'"), - 1)
}, Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY = 0, Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID = 1, Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING = 2, Phaser.Plugin.ArcadeSlopes.TileSlope.FULL = 0, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_BOTTOM = 21, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_TOP = 22, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_LEFT = 23, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_RIGHT = 24, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_BOTTOM_LEFT = 1, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_BOTTOM_RIGHT = 2, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_TOP_LEFT = 3, Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_TOP_RIGHT = 4, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_LEFT_LOW = 5, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_LEFT_HIGH = 6, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_RIGHT_LOW = 7, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_RIGHT_HIGH = 8, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_BOTTOM_LOW = 9, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_BOTTOM_HIGH = 10, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_BOTTOM_LOW = 11, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_BOTTOM_HIGH = 12, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_TOP_LOW = 13, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_TOP_HIGH = 14, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_TOP_LOW = 15, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_TOP_HIGH = 16, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_LEFT_LOW = 17, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_LEFT_HIGH = 18, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_RIGHT_LOW = 19, Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_RIGHT_HIGH = 20, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory = function() {
    this.definitions = {}, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.FULL] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createFull, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_BOTTOM] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfBottom, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_TOP] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfTop, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_LEFT] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfLeft, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_RIGHT] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfRight, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_BOTTOM_LEFT] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfBottomLeft, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_BOTTOM_RIGHT] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfBottomRight, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_TOP_LEFT] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfTopLeft, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.HALF_TOP_RIGHT] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfTopRight, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_LEFT_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomLeftLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_LEFT_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomLeftHigh, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_RIGHT_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomRightLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_BOTTOM_RIGHT_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomRightHigh, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_BOTTOM_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftBottomLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_BOTTOM_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftBottomHigh, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_BOTTOM_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightBottomLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_BOTTOM_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightBottomHigh, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_TOP_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftTopLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_LEFT_TOP_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftTopHigh, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_TOP_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightTopLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_RIGHT_TOP_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightTopHigh, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_LEFT_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopLeftLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_LEFT_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopLeftHigh, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_RIGHT_LOW] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopRightLow, this.definitions[Phaser.Plugin.ArcadeSlopes.TileSlope.QUARTER_TOP_RIGHT_HIGH] = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopRightHigh
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.prototype.constructor = Phaser.Plugin.ArcadeSlopes.TileSlopeFactory, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.prototype.define = function(e, t) {
    "function" == typeof t && (this.definitions[e] = t)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.prototype.create = function(e, t) {
    var o = e;
    return e = Phaser.Plugin.ArcadeSlopes.TileSlope.resolveType(o), this.definitions.hasOwnProperty(e) ? "function" != typeof this.definitions[e] ? (console.warn("Slope type definition for type " + o + " is not a function"), null) : this.definitions[e].call(this, e, t) : (console.warn("Slope type " + o + " not defined"), null)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.prototype.convertTilemap = function(e, t, o) {
    return t = e.getLayer(t), this.convertTilemapLayer(t, o), e
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.prototype.convertTilemapLayer = function(e, t) {
    var o = this;
    return e.layer.data.forEach(function(r) {
        r.forEach(function(r) {
            if (t.hasOwnProperty(r.index)) {
                var i = o.create(t[r.index], r);
                i && (r.slope = i)
            }
            var l = r.x,
                s = r.y;
            r.neighbours = r.neighbours || {}, r.neighbours.above = e.map.getTileAbove(e.index, l, s), r.neighbours.below = e.map.getTileBelow(e.index, l, s), r.neighbours.left = e.map.getTileLeft(e.index, l, s), r.neighbours.right = e.map.getTileRight(e.index, l, s), r.neighbours.topLeft = e.map.getTileTopLeft(e.index, l, s), r.neighbours.topRight = e.map.getTileTopRight(e.index, l, s), r.neighbours.bottomLeft = e.map.getTileBottomLeft(e.index, l, s), r.neighbours.bottomRight = e.map.getTileBottomRight(e.index, l, s)
        })
    }), this.calculateEdges(e), e
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.prototype.calculateEdges = function(e) {
    for (var t = null, o = null, r = null, i = null, l = 0, s = e.layer.height; s > l; l++) for (var n = 0, a = e.layer.width; a > n; n++) {
        var p = e.layer.data[l][n];
        p && p.hasOwnProperty("slope") && (t = e.map.getTileAbove(e.index, n, l), o = e.map.getTileBelow(e.index, n, l), r = e.map.getTileLeft(e.index, n, l), i = e.map.getTileRight(e.index, n, l), t && t.hasOwnProperty("slope") && (p.slope.edges.top = this.compareEdges(p.slope.edges.top, t.slope.edges.bottom)), o && o.hasOwnProperty("slope") && (p.slope.edges.bottom = this.compareEdges(p.slope.edges.bottom, o.slope.edges.top)), r && r.hasOwnProperty("slope") && (p.slope.edges.left = this.compareEdges(p.slope.edges.left, r.slope.edges.right)), i && i.hasOwnProperty("slope") && (p.slope.edges.right = this.compareEdges(p.slope.edges.right, i.slope.edges.left)))
    }
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.prototype.compareEdges = function(e, t) {
    return e === Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID && t === Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID ? Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY : e === Phaser.Plugin.ArcadeSlopes.TileSlope.SOLID && t === Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY ? Phaser.Plugin.ArcadeSlopes.TileSlope.EMPTY : e
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createFull = function(e, t) {
    var o = new SAT.Box(new SAT.Vector(t.worldX, t.worldY), t.width, t.height).toPolygon();
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfBottom = function(e, t) {
    var o = t.height / 2,
        r = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, o), new SAT.Vector(t.width, o), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        i = new Phaser.Line(t.left, t.top + t.height / 2, t.right, t.top + t.height / 2),
        l = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        };
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfTop = function(e, t) {
    var o = t.height / 2,
        r = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, o), new SAT.Vector(0, o)]),
        i = new Phaser.Line(t.left, t.top, t.right, t.top),
        l = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        };
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfLeft = function(e, t) {
    var o = t.width / 2,
        r = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(o, 0), new SAT.Vector(o, t.height), new SAT.Vector(0, t.height)]),
        i = new Phaser.Line(t.left + o, t.top, t.left + o, t.bottom),
        l = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        };
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfRight = function(e, t) {
    var o = t.width / 2,
        r = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(o, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(o, t.height)]),
        i = new Phaser.Line(t.left + o, t.top, t.left + o, t.bottom),
        l = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        };
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfBottomLeft = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.top, t.right, t.bottom),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.7071067811865475, - .7071067811865475);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfBottomRight = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.bottom, t.right, t.top),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.707106781186548, - .707106781186548);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfTopLeft = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.right, t.top, t.left, t.bottom),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.7071067811865475, .7071067811865475);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createHalfTopRight = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height)]),
        r = new Phaser.Line(t.right, t.bottom, t.left, t.top),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.7071067811865475, .7071067811865475);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomLeftLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, t.height / 2), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.top + t.height / 2, t.right, t.bottom),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.4472135954999579, - .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l);
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomLeftHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, t.height / 2), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.top + t.height / 2, t.right, t.bottom),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.4472135954999579, - .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomRightLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(t.width, t.height / 2), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.bottom, t.right, t.top + t.height / 2),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.4472135954999579, - .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterBottomRightHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(t.width, 0), new SAT.Vector(0, t.height / 2), new SAT.Vector(0, t.height), new SAT.Vector(t.width, t.height)]),
        r = new Phaser.Line(t.left, t.bottom, t.right, t.top + t.height / 2),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.4472135954999579, - .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftBottomLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width / 2, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left + t.width / 2, t.top, t.width, t.height),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.8944271909999159, - .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftBottomHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width / 2, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.top, t.left + t.width / 2, t.bottom),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.8944271909999159, - .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightBottomLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(t.width / 2, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.bottom, t.left + t.width / 2, t.top),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.8944271909999159, - .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightBottomHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(t.width / 2, t.height)]),
        r = new Phaser.Line(t.left + t.width / 2, t.bottom, t.right, t.top),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.8944271909999159, - .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftTopLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width / 2, 0), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(0, t.height, t.width / 2, 0),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.8944271909999159, .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterLeftTopHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width / 2, t.height), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left + t.width / 2, t.bottom, t.right, t.bottom),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.8944271909999159, .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightTopLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(t.width / 2, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height)]),
        r = new Phaser.Line(t.left + t.width / 2, t.top, t.right, t.bottom),
        i = {
            top: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.8944271909999159, .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterRightTopHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(t.width / 2, t.height)]),
        r = new Phaser.Line(t.left, t.top, t.left + t.width / 2, t.bottom),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.8944271909999159, .4472135954999579);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopLeftLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(0, t.height / 2)]),
        r = new Phaser.Line(t.left, t.top + t.height / 2, t.right, t.top),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.4472135954999579, .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopLeftHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height / 2), new SAT.Vector(0, t.height)]),
        r = new Phaser.Line(t.left, t.bottom, t.right, t.top + t.height / 2),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(.4472135954999579, .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopRightLow = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height / 2)]),
        r = new Phaser.Line(t.left, t.top, t.right, t.top + t.height / 2),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            right: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.4472135954999579, .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
}, Phaser.Plugin.ArcadeSlopes.TileSlopeFactory.createQuarterTopRightHigh = function(e, t) {
    var o = new SAT.Polygon(new SAT.Vector(t.worldX, t.worldY), [new SAT.Vector(0, 0), new SAT.Vector(t.width, 0), new SAT.Vector(t.width, t.height), new SAT.Vector(0, t.height / 2)]),
        r = new Phaser.Line(t.left, t.top + t.height / 2, t.right, t.top + t.height),
        i = {
            bottom: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING,
            left: Phaser.Plugin.ArcadeSlopes.TileSlope.INTERESTING
        }, l = new SAT.Vector(-.4472135954999579, .8944271909999159);
    return new Phaser.Plugin.ArcadeSlopes.TileSlope(e, t, o, r, i, l)
},
function(e, t) {
    "use strict";
    "function" == typeof define && define.amd ? define(t) : "object" == typeof exports ? module.exports = t() : e.SAT = t()
}(this, function() {
    "use strict";

    function e(e, t) {
        this.x = e || 0, this.y = t || 0
    }
    function t(t, o) {
        this.pos = t || new e, this.r = o || 0
    }
    function o(t, o) {
        this.pos = t || new e, this.angle = 0, this.offset = new e, this.setPoints(o || [])
    }
    function r(t, o, r) {
        this.pos = t || new e, this.w = o || 0, this.h = r || 0
    }
    function i() {
        this.a = null, this.b = null, this.overlapN = new e, this.overlapV = new e, this.clear()
    }
    function l(e, t, o) {
        for (var r = Number.MAX_VALUE, i = -Number.MAX_VALUE, l = e.length, s = 0; l > s; s++) {
            var n = e[s].dot(t);
            r > n && (r = n), n > i && (i = n)
        }
        o[0] = r, o[1] = i
    }
    function s(e, t, o, r, i, s) {
        var n = d.pop(),
            a = d.pop(),
            p = g.pop().copy(t).sub(e),
            h = p.dot(i);
        if (l(o, i, n), l(r, i, a), a[0] += h, a[1] += h, n[0] > a[1] || a[0] > n[1]) return g.push(p), d.push(n), d.push(a), !0;
        if (s) {
            var T = 0;
            if (n[0] < a[0]) if (s.aInB = !1, n[1] < a[1]) T = n[1] - a[0], s.bInA = !1;
            else {
                var c = n[1] - a[0],
                    S = a[1] - n[0];
                T = S > c ? c : -S
            } else if (s.bInA = !1, n[1] > a[1]) T = n[0] - a[1], s.aInB = !1;
            else {
                var c = n[1] - a[0],
                    S = a[1] - n[0];
                T = S > c ? c : -S
            }
            var P = Math.abs(T);
            P < s.overlap && (s.overlap = P, s.overlapN.copy(i), 0 > T && s.overlapN.reverse())
        }
        return g.push(p), d.push(n), d.push(a), !1
    }
    function n(e, t) {
        var o = e.len2(),
            r = t.dot(e);
        return 0 > r ? f : r > o ? w : R
    }
    function a(e, t) {
        var o = g.pop().copy(e).sub(t.pos),
            r = t.r * t.r,
            i = o.len2();
        return g.push(o), r >= i
    }
    function p(e, t) {
        y.pos.copy(e), A.clear();
        var o = S(y, t, A);
        return o && (o = A.aInB), o
    }
    function h(e, t, o) {
        var r = g.pop().copy(t.pos).sub(e.pos),
            i = e.r + t.r,
            l = i * i,
            s = r.len2();
        if (s > l) return g.push(r), !1;
        if (o) {
            var n = Math.sqrt(s);
            o.a = e, o.b = t, o.overlap = i - n, o.overlapN.copy(r.normalize()), o.overlapV.copy(r).scale(o.overlap), o.aInB = e.r <= t.r && n <= t.r - e.r, o.bInA = t.r <= e.r && n <= e.r - t.r
        }
        return g.push(r), !0
    }
    function T(e, t, o) {
        for (var r = g.pop().copy(t.pos).sub(e.pos), i = t.r, l = i * i, s = e.calcPoints, a = s.length, p = g.pop(), h = g.pop(), T = 0; a > T; T++) {
            var c = T === a - 1 ? 0 : T + 1,
                S = 0 === T ? a - 1 : T - 1,
                P = 0,
                u = null;
            p.copy(e.edges[T]), h.copy(r).sub(s[T]), o && h.len2() > l && (o.aInB = !1);
            var d = n(p, h);
            if (d === f) {
                p.copy(e.edges[S]);
                var A = g.pop().copy(r).sub(s[S]);
                if (d = n(p, A), d === w) {
                    var y = h.len();
                    if (y > i) return g.push(r), g.push(p), g.push(h), g.push(A), !1;
                    o && (o.bInA = !1, u = h.normalize(), P = i - y)
                }
                g.push(A)
            } else if (d === w) {
                if (p.copy(e.edges[c]), h.copy(r).sub(s[c]), d = n(p, h), d === f) {
                    var y = h.len();
                    if (y > i) return g.push(r), g.push(p), g.push(h), !1;
                    o && (o.bInA = !1, u = h.normalize(), P = i - y)
                }
            } else {
                var R = p.perp().normalize(),
                    y = h.dot(R),
                    _ = Math.abs(y);
                if (y > 0 && _ > i) return g.push(r), g.push(R), g.push(h), !1;
                o && (u = R, P = i - y, (y >= 0 || 2 * i > P) && (o.bInA = !1))
            }
            u && o && Math.abs(P) < Math.abs(o.overlap) && (o.overlap = P, o.overlapN.copy(u))
        }
        return o && (o.a = e, o.b = t, o.overlapV.copy(o.overlapN).scale(o.overlap)), g.push(r), g.push(p), g.push(h), !0
    }
    function c(e, t, o) {
        var r = T(t, e, o);
        if (r && o) {
            var i = o.a,
                l = o.aInB;
            o.overlapN.reverse(), o.overlapV.reverse(), o.a = o.b, o.b = i, o.aInB = o.bInA, o.bInA = l
        }
        return r
    }
    function S(e, t, o) {
        for (var r = e.calcPoints, i = r.length, l = t.calcPoints, n = l.length, a = 0; i > a; a++) if (s(e.pos, t.pos, r, l, e.normals[a], o)) return !1;
        for (var a = 0; n > a; a++) if (s(e.pos, t.pos, r, l, t.normals[a], o)) return !1;
        return o && (o.a = e, o.b = t, o.overlapV.copy(o.overlapN).scale(o.overlap)), !0
    }
    var P = {};
    P.Vector = e, P.V = e, e.prototype.copy = e.prototype.copy = function(e) {
        return this.x = e.x, this.y = e.y, this
    }, e.prototype.clone = e.prototype.clone = function() {
        return new e(this.x, this.y)
    }, e.prototype.perp = e.prototype.perp = function() {
        var e = this.x;
        return this.x = this.y, this.y = -e, this
    }, e.prototype.rotate = e.prototype.rotate = function(e) {
        var t = this.x,
            o = this.y;
        return this.x = t * Math.cos(e) - o * Math.sin(e), this.y = t * Math.sin(e) + o * Math.cos(e), this
    }, e.prototype.reverse = e.prototype.reverse = function() {
        return this.x = -this.x, this.y = -this.y, this
    }, e.prototype.normalize = e.prototype.normalize = function() {
        var e = this.len();
        return e > 0 && (this.x = this.x / e, this.y = this.y / e), this
    }, e.prototype.add = e.prototype.add = function(e) {
        return this.x += e.x, this.y += e.y, this
    }, e.prototype.sub = e.prototype.sub = function(e) {
        return this.x -= e.x, this.y -= e.y, this
    }, e.prototype.scale = e.prototype.scale = function(e, t) {
        return this.x *= e, this.y *= t || e, this
    }, e.prototype.project = e.prototype.project = function(e) {
        var t = this.dot(e) / e.len2();
        return this.x = t * e.x, this.y = t * e.y, this
    }, e.prototype.projectN = e.prototype.projectN = function(e) {
        var t = this.dot(e);
        return this.x = t * e.x, this.y = t * e.y, this
    }, e.prototype.reflect = e.prototype.reflect = function(e) {
        var t = this.x,
            o = this.y;
        return this.project(e).scale(2), this.x -= t, this.y -= o, this
    }, e.prototype.reflectN = e.prototype.reflectN = function(e) {
        var t = this.x,
            o = this.y;
        return this.projectN(e).scale(2), this.x -= t, this.y -= o, this
    }, e.prototype.dot = e.prototype.dot = function(e) {
        return this.x * e.x + this.y * e.y
    }, e.prototype.len2 = e.prototype.len2 = function() {
        return this.dot(this)
    }, e.prototype.len = e.prototype.len = function() {
        return Math.sqrt(this.len2())
    }, P.Circle = t, t.prototype.getAABB = t.prototype.getAABB = function() {
        var t = this.r,
            o = this.pos.clone().sub(new e(t, t));
        return new r(o, 2 * t, 2 * t).toPolygon()
    }, P.Polygon = o, o.prototype.setPoints = o.prototype.setPoints = function(t) {
        var o = !this.points || this.points.length !== t.length;
        if (o) {
            var r, i = this.calcPoints = [],
                l = this.edges = [],
                s = this.normals = [];
            for (r = 0; r < t.length; r++) i.push(new e), l.push(new e), s.push(new e)
        }
        return this.points = t, this._recalc(), this
    }, o.prototype.setAngle = o.prototype.setAngle = function(e) {
        return this.angle = e, this._recalc(), this
    }, o.prototype.setOffset = o.prototype.setOffset = function(e) {
        return this.offset = e, this._recalc(), this
    }, o.prototype.rotate = o.prototype.rotate = function(e) {
        for (var t = this.points, o = t.length, r = 0; o > r; r++) t[r].rotate(e);
        return this._recalc(), this
    }, o.prototype.translate = o.prototype.translate = function(e, t) {
        for (var o = this.points, r = o.length, i = 0; r > i; i++) o[i].x += e, o[i].y += t;
        return this._recalc(), this
    }, o.prototype._recalc = function() {
        var e, t = this.calcPoints,
            o = this.edges,
            r = this.normals,
            i = this.points,
            l = this.offset,
            s = this.angle,
            n = i.length;
        for (e = 0; n > e; e++) {
            var a = t[e].copy(i[e]);
            a.x += l.x, a.y += l.y, 0 !== s && a.rotate(s)
        }
        for (e = 0; n > e; e++) {
            var p = t[e],
                h = n - 1 > e ? t[e + 1] : t[0],
                T = o[e].copy(h).sub(p);
            r[e].copy(T).perp().normalize()
        }
        return this
    }, o.prototype.getAABB = o.prototype.getAABB = function() {
        for (var t = this.calcPoints, o = t.length, i = t[0].x, l = t[0].y, s = t[0].x, n = t[0].y, a = 1; o > a; a++) {
            var p = t[a];
            p.x < i ? i = p.x : p.x > s && (s = p.x), p.y < l ? l = p.y : p.y > n && (n = p.y)
        }
        return new r(this.pos.clone().add(new e(i, l)), s - i, n - l).toPolygon()
    }, P.Box = r, r.prototype.toPolygon = r.prototype.toPolygon = function() {
        var t = this.pos,
            r = this.w,
            i = this.h;
        return new o(new e(t.x, t.y), [new e, new e(r, 0), new e(r, i), new e(0, i)])
    }, P.Response = i, i.prototype.clear = i.prototype.clear = function() {
        return this.aInB = !0, this.bInA = !0, this.overlap = Number.MAX_VALUE, this
    };
    for (var g = [], u = 0; 10 > u; u++) g.push(new e);
    for (var d = [], u = 0; 5 > u; u++) d.push([]);
    var A = new i,
        y = new r(new e, 1, 1).toPolygon();
    P.isSeparatingAxis = s;
    var f = -1,
        R = 0,
        w = 1;
    return P.pointInCircle = a, P.pointInPolygon = p, P.testCircleCircle = h, P.testPolygonCircle = T, P.testCirclePolygon = c, P.testPolygonPolygon = S, P
}); 